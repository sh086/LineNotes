(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{409:function(v,t,_){v.exports=_.p+"assets/img/simple.d8afdc51.png"},410:function(v,t,_){v.exports=_.p+"assets/img/service.096e3cab.png"},411:function(v,t,_){v.exports=_.p+"assets/img/Lusifer2018052805390003.68b916c8.png"},412:function(v,t,_){v.exports=_.p+"assets/img/image-20211125162117715.9c021c3b.png"},413:function(v,t,_){v.exports=_.p+"assets/img/Lusifer2018052805390004.7c4d48ac.png"},414:function(v,t,_){v.exports=_.p+"assets/img/Lusifer2018052805390005.2638c113.png"},415:function(v,t,_){v.exports=_.p+"assets/img/Lusifer2018052805390006.940374a4.png"},416:function(v,t,_){v.exports=_.p+"assets/img/image-20211125174122846.c9cbac1c.png"},417:function(v,t,_){v.exports=_.p+"assets/img/78927387.2618c101.png"},418:function(v,t,_){v.exports=_.p+"assets/img/images-12.a5f1e6a5.png"},419:function(v,t,_){v.exports=_.p+"assets/img/image-13.c7b92c32.png"},420:function(v,t,_){v.exports=_.p+"assets/img/images-14.eb11f2e5.png"},421:function(v,t,_){v.exports=_.p+"assets/img/images-15.fb91f174.png"},538:function(v,t,_){"use strict";_.r(t);var s=_(25),e=Object(s.a)({},(function(){var v=this,t=v.$createElement,s=v._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[s("h1",{attrs:{id:"微服务简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微服务简介"}},[v._v("#")]),v._v(" 微服务简介")]),v._v(" "),s("p",[s("strong",[v._v("文档：")])]),v._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://docshome.gitbook.io/microservices/",target:"_blank",rel:"noopener noreferrer"}},[v._v("微服务从设计到部署"),s("OutboundLink")],1)]),v._v(" "),s("li",[s("a",{attrs:{href:"http://gdut_yy.gitee.io/doc-refact2/",target:"_blank",rel:"noopener noreferrer"}},[v._v("重构-改善既有代码的设计"),s("OutboundLink")],1)]),v._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/topsale/book-java-cloud-dubbo",target:"_blank",rel:"noopener noreferrer"}},[v._v("Java Cloud With Dubbo"),s("OutboundLink")],1)]),v._v(" "),s("li",[v._v("研磨设计模式")]),v._v(" "),s("li",[v._v("架构即未来")])]),v._v(" "),s("h2",{attrs:{id:"微服务模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微服务模式"}},[v._v("#")]),v._v(" 微服务模式")]),v._v(" "),s("h3",{attrs:{id:"走进单体地狱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#走进单体地狱"}},[v._v("#")]),v._v(" 走进单体地狱")]),v._v(" "),s("p",[v._v("​\t　单体应用多用于 "),s("strong",[v._v("项目规模较小、用户较少")]),v._v(" 或者 "),s("strong",[v._v("企业内部")]),v._v(" 使用的应用，不适合开发具有高可用、高并发、高性能特性的互联网应用。")]),v._v(" "),s("p",[v._v("​\t　在项目的早期阶段，使用单体应用开发"),s("code",[v._v("互联网应用")]),v._v("也可以良好运作。开发者可以快速通过IDEA，开发风格类似的单体应用模型。通过简单地启动并使用如"),s("code",[v._v("Selenium")]),v._v("测试包来测试"),s("code",[v._v("UI")]),v._v("，以轻松地实现"),s("strong",[v._v("端到端 (end-to-end) 测试")]),v._v("。")]),v._v(" "),s("p",[v._v("​\t　此外，应用程序被作为一个单体易于打包和部署，只需将拷贝打包好的应用程序上传到服务器上运行即可。通过运行"),s("strong",[v._v("多个副本")]),v._v("和结合"),s("strong",[v._v("负载均衡器")]),v._v("，可以很方便的扩展单体应用。")]),v._v(" "),s("img",{attrs:{src:_(409),height:"500",width:"500"}}),v._v(" "),s("p",[v._v("​\t　但是，随着时间推移，小而简单的应用将会逐渐成长成一个"),s("strong",[v._v("庞大")]),v._v("、"),s("strong",[v._v("复杂")]),v._v("的单体，应用程序变得难以扩展，不可靠。敏捷开发和交付的任何一次尝试都将原地徘徊，正确修复 bug 和实现新功能变得非常困难而耗时。")]),v._v(" "),s("p",[v._v("​\t　应用启动时间的不断变长和因变更所需要进行的大量测试，导致复杂单体持续部署变得非常困难。当不同模块存在资源（CPU密集型和内存密集型）需求冲突时，单体应用可能难以扩展。")]),v._v(" "),s("p",[v._v("​\t　任何模块的一个bug都可能会拖垮整个进程，影响到整个应用的可用性。单体应用也使得采用新框架和语言变得非常困难。")]),v._v(" "),s("h3",{attrs:{id:"微服务解决复杂问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微服务解决复杂问题"}},[v._v("#")]),v._v(" 微服务解决复杂问题")]),v._v(" "),s("p",[v._v("​\t　微服务将单体应用根据业务需求"),s("strong",[v._v("充分分解")]),v._v("成一套"),s("strong",[v._v("较小的互连服务")]),v._v("，以实现"),s("strong",[v._v("松耦合")]),v._v("，达到应用敏捷开发和部署的目的。每个微服务都是实现了一组不同的特性或功能的"),s("strong",[v._v("自包含")]),v._v("应用，可以根据不同的业务需求选择"),s("strong",[v._v("相适应业务")]),v._v("的 "),s("strong",[v._v("数据库模式")]),v._v("  和 "),s("strong",[v._v("用例部署场景")]),v._v("。")]),v._v(" "),s("p",[v._v("​\t　"),s("strong",[v._v("每个服务可由多个服务实例组成")]),v._v("，每个服务实例是一个Docker容器，为了实现高可用，容器是在多个云虚拟机上运行的。通过"),s("strong",[v._v("服务发现机制")]),v._v("使得服务能够发现"),s("strong",[v._v("需要与之通信的任何其他服务的位置")]),v._v("（主机和端口）。")]),v._v(" "),s("p",[v._v("​\t　不同的服务用例之间进行跨实例分发请求时，不能直接通过 "),s("code",[v._v("REST API")]),v._v(" 访问，而是需要通过 "),s("strong",[v._v("API 网关")]),v._v(" (API Gateway) 进行"),s("strong",[v._v("异步、基于消息的通信")]),v._v("，"),s("strong",[v._v("API 网关负责负载均衡、缓存、访问控制、 API 计量和监控")]),v._v("， 可以通过使用"),s("code",[v._v("NGINX")]),v._v(" 来实现。")]),v._v(" "),s("img",{attrs:{src:_(410),height:"500",width:"500"}}),v._v(" "),s("p",[v._v("​\t　微服务架构模式强制一定程度的模块化，每个服务都有一个明确定义边界的方式，使得"),s("strong",[v._v("个体服务能被更快地开发，并更容易理解与维护")]),v._v("。开发者可以自由选择与当前业务需求相适应的技术，使得使用当前技术重写旧服务将变得更加可行。微服务可以实现每个微服务独立部署，使得变更一经测试即可立即部署。微服务架构模式使得每个服务能够独立扩展使用与服务资源要求最匹配的硬件。")]),v._v(" "),s("p",[v._v("​\t　但是，微服务架构模式也容易"),s("strong",[v._v("过多偏向于小型化服务的规模")]),v._v("，而"),s("strong",[v._v("忽略")]),v._v("充分分解业务需求以方便应用敏捷开发和部署的目标。微服务是一个分布式系统，其使得整体变得复杂，容易出现局部故障。分区数据库架构难以实现分布式事务，"),s("strong",[v._v("不得不使用基于最终一致性的方法保证数据的一致性")]),v._v("。测试某个微服务的功能时，需要启动该服务及其所依赖的所有服务，实现跨服务需求变更时，需要仔细规划和协调出现的变更至每个服务。")]),v._v(" "),s("p",[v._v("​\t　部署基于微服务的应用程序也是相当复杂的，微服务应用程序通常由大量的服务组成，每个服务都有多个运行时实例、还有更多的移动部件需要配置、部署、扩展和监控，因此，要成功部署微服务应用程序，需要求开发人员能"),s("strong",[v._v("高度控制部署方式")]),v._v("和"),s("strong",[v._v("高度自动化")]),v._v("。一种自动化方式是使用现成的"),s("code",[v._v("PaaS")]),v._v("，如 "),s("code",[v._v("Cloud Foundry")]),v._v("；另一个方式是使用"),s("code",[v._v("Kubernetes")]),v._v("集群方案开发自己的 "),s("code",[v._v("PaaS")]),v._v("。")]),v._v(" "),s("h2",{attrs:{id:"微服务实践"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微服务实践"}},[v._v("#")]),v._v(" 微服务实践")]),v._v(" "),s("p",[v._v("​\t　"),s("strong",[v._v("微服务架构")]),v._v("是建立在"),s("strong",[v._v("网络不可靠")]),v._v("的基础上的，主要解决了"),s("code",[v._v("客户端如何访问这些服务")]),v._v("、"),s("code",[v._v("每个服务之间如何通信")]),v._v("、"),s("code",[v._v("如何实现如此多的服务")]),v._v("、"),s("code",[v._v("如何解决服务挂了")]),v._v("这四个分布式开发时会存在的问题。")]),v._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 微服务解决方案")]),v._v("\nSpring Boot + Spring Cloud Alibaba\nSpring Boot + Dubbo + Zookeeper \nSpring Boot + Spring Cloud Netflix          "),s("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 目前已停止更新，只进行维护")]),v._v("\nSpring Boot + Spring Cloud Alibaba + Dubbo  "),s("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 非主流")]),v._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# Service Mesh 服务网格是下一代微服务架构标准，如：Istio")]),v._v("\n")])]),v._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[v._v("1")]),s("br"),s("span",{staticClass:"line-number"},[v._v("2")]),s("br"),s("span",{staticClass:"line-number"},[v._v("3")]),s("br"),s("span",{staticClass:"line-number"},[v._v("4")]),s("br"),s("span",{staticClass:"line-number"},[v._v("5")]),s("br"),s("span",{staticClass:"line-number"},[v._v("6")]),s("br")])]),s("p",[v._v("​\t　微服务架构可以更加快速的构建一个稳定、高速的系统，但是目前还不成熟，发展趋势是向"),s("strong",[v._v("标准化微服务框架")]),v._v("发展，如"),s("strong",[v._v("ServiceMesh")]),v._v("服务网格化、Istio等。")]),v._v(" "),s("h3",{attrs:{id:"客户端如何访问这些服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#客户端如何访问这些服务"}},[v._v("#")]),v._v(" 客户端如何访问这些服务")]),v._v(" "),s("p",[v._v("​\t　单体式开发的时候，所有的服务都是本地的，UI 可以直接调用；现在按功能拆分成独立的微服务，后台有 N 个服务，前台就需要记住管理 N 个服务，一个服务 "),s("strong",[v._v("下线")]),v._v("、"),s("strong",[v._v("更新")]),v._v("、"),s("strong",[v._v("升级")]),v._v("，前台就要重新部署。")]),v._v(" "),s("p",[v._v("​\t　这明显不符合微服务拆分理念，特别当前台是移动应用的时候，通常业务变化的节奏更快。所以，需要为前台（通常是移动应用）提供后台服务的聚合，提供一个统一的服务出口，解除他们之间的耦合。")]),v._v(" "),s("p",[v._v("​\t　"),s("code",[v._v("API Gateway")]),v._v("提供统一服务入口，让微服务对前台透明；聚合后台的服务，节省流量；对用户登录信息和权限统一维护管理；提升性能；提供安全、过滤、流控等API管理功能。不过 "),s("code",[v._v("API Gateway")]),v._v(" 也有可能成为 "),s("strong",[v._v("单点故障")]),v._v(" 点或者性能的瓶颈。")]),v._v(" "),s("p",[s("img",{attrs:{src:_(411),alt:"Lusifer2018052805390003"}})]),v._v(" "),s("h3",{attrs:{id:"每个服务之间如何通信"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#每个服务之间如何通信"}},[v._v("#")]),v._v(" 每个服务之间如何通信")]),v._v(" "),s("p",[v._v("（1）同步调用")]),v._v(" "),s("p",[v._v("​\t　同步调用一致性强，但在调用层次多的时候，容易"),s("strong",[v._v("阻塞")]),v._v("，导致"),s("strong",[v._v("单点故障")]),v._v("。同步调用有"),s("code",[v._v("REST")]),v._v("和"),s("code",[v._v("RPC")]),v._v("两种方式，因为网络中只有字符串可以穿透防火墙，所以一般采用  "),s("code",[v._v("对内RPC")]),v._v(" 、"),s("code",[v._v("对外REST")]),v._v(" 的策略。")]),v._v(" "),s("p",[v._v("​\t　"),s("code",[v._v("REST")]),v._v("基于 "),s("strong",[v._v("HTTP")]),v._v(" 协议（应用层），可以"),s("strong",[v._v("跨防火墙")]),v._v("在不同的局域网之间通讯，只要封装了 HTTP 的 SDK 就能调用，使用范围较广。")]),v._v(" "),s("p",[v._v("​\t　"),s("code",[v._v("RPC")]),v._v(" "),s("strong",[v._v("远程过程调用")]),v._v("，基于"),s("strong",[v._v("TCP")]),v._v(" 协议（传输层）通讯，"),s("strong",[v._v("传输协议更高效，安全更可控， 速度也更快")]),v._v("。但是，"),s("strong",[v._v("不能跨防火墙通讯")]),v._v("，仅支持局域网内通讯；而且"),s("strong",[v._v("耦合性很大")]),v._v("，服务间具有很大的依赖性。常用的 RPC 框架有 Thrift（跨语言）、Dubbo（只能用于Java）。")]),v._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// RPC用法，RPCUser是其他服务的类，直接调用即可使用")]),v._v("\nval use "),s("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("new")]),v._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("RPCUser")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// Thrift示例（跨语言），在JavaScript中通过Java的实例化方式初始化")]),v._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("var")]),v._v(" user "),s("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" nre "),s("span",{pre:!0,attrs:{class:"token class-name"}},[v._v("User")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[v._v("1")]),s("br"),s("span",{staticClass:"line-number"},[v._v("2")]),s("br"),s("span",{staticClass:"line-number"},[v._v("3")]),s("br"),s("span",{staticClass:"line-number"},[v._v("4")]),s("br"),s("span",{staticClass:"line-number"},[v._v("5")]),s("br")])]),s("p",[v._v("（2）异步调用")]),v._v(" "),s("p",[v._v("​\t　异步消息的方式在分布式系统中应用广泛，既能"),s("strong",[v._v("降低调用服务之间的耦合性")]),v._v("，又能成为调用之间的"),s("strong",[v._v("缓冲")]),v._v("，确保消息积压不会冲垮被调用方；同时能"),s("strong",[v._v("保证调用方的服务体验")]),v._v("，不至于服务A挂掉导致服务B被后台性能拖慢。不过需要付出的代价是"),s("strong",[v._v("一致性的减弱")]),v._v("，需要接受数据 "),s("strong",[v._v("最终一致性")]),v._v("。")]),v._v(" "),s("p",[v._v("​\t　Message Queue（MQ），消息队列中间件，采用"),s("strong",[v._v("生产者/消费者通讯模型")]),v._v("，不仅将消息的发送和接收分离，实现应用的"),s("strong",[v._v("异步")]),v._v("和"),s("strong",[v._v("解偶")]),v._v("；还实现"),s("strong",[v._v("消息通讯")]),v._v("，从而"),s("strong",[v._v("无视底层复杂的通讯协议")]),v._v("，如HTTP 协议很难实现两端通讯以及不支持长连接等。")]),v._v(" "),s("p",[v._v("（1）有 Broker 的 MQ")]),v._v(" "),s("p",[v._v("​\t　RocketMQ是一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。")]),v._v(" "),s("p",[s("img",{attrs:{src:_(412),alt:"image-20211125162117715"}})]),v._v(" "),s("p",[v._v("（2）无Broker 的 MQ")]),v._v(" "),s("p",[v._v("​\t　无 Broker 的MQ，如ZeroMQ；节点之间通讯的消息都是发送到彼此的队列中，每个节点都既是生产者又是消费者。")]),v._v(" "),s("p",[s("img",{attrs:{src:"D:%5Ccodehub%5Ccollege%5Cdocs%5Cguide%5Ccourse%5Cfuntl%5Cmicroservice%5Cimages%5CLusifer2018042523390003.png",alt:"Lusifer2018042523390003"}})]),v._v(" "),s("p",[v._v("​\t　还有就是后台服务一般要实现 "),s("strong",[v._v("幂等性")]),v._v("，因为消息发送，出于性能的考虑一般会有重复（保证消息的"),s("strong",[v._v("被收到且仅收到一次")]),v._v("对性能是很大的考验）。")]),v._v(" "),s("p",[v._v("​\t　常用的消息中间件有"),s("code",[v._v("Kafka")]),v._v("、"),s("code",[v._v("Notify")]),v._v(" 和 "),s("code",[v._v("MessageQueue")]),v._v("。特别的， "),s("code",[v._v("kafka")]),v._v(" 采用"),s("strong",[v._v("直连")]),v._v("进行异步传输的方式，没有 "),s("code",[v._v("Broker")]),v._v(" ，若对消息完整性不要求（消息可以被丢失，仅要求速度），可以使用 "),s("code",[v._v("kafka")]),v._v(" 作为消息中间件，如日志传输。")]),v._v(" "),s("p",[s("img",{attrs:{src:_(413),alt:"Lusifer2018052805390004"}})]),v._v(" "),s("h3",{attrs:{id:"如何实现如此多的服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何实现如此多的服务"}},[v._v("#")]),v._v(" 如何实现如此多的服务")]),v._v(" "),s("p",[v._v("​\t　在微服务架构中，一般每一个服务都是有多个拷贝，来做负载均衡。一个服务"),s("strong",[v._v("随时可能下线")]),v._v("，也可能应对临时访问压力增"),s("strong",[v._v("加新的服务节点")]),v._v("。一般采"),s("strong",[v._v("用服务注册与发现中心")]),v._v("对分布式服务进行管理，常见的有Zookeeper 、Eureka 等。")]),v._v(" "),s("p",[v._v("​\t　当服务上线时，服务提供者将自己的服务信息注册到 "),s("code",[v._v("服务注册与发现中心")]),v._v("，并通过心跳维持长链接，实时更新链接信息。服务调用者通过 "),s("code",[v._v("服务注册与发现中心")]),v._v("寻址，根据可定制算法，找到一个服务，还可以将服务信息缓存在本地以提高性能。当服务下线时，服"),s("code",[v._v("务注册与发现中心")]),v._v(" 会发通知给服务客户端。")]),v._v(" "),s("p",[v._v("（1）基于客户端的服务注册与发现")]),v._v(" "),s("p",[s("img",{attrs:{src:_(414),alt:"Lusifer2018052805390005"}})]),v._v(" "),s("p",[v._v("（2）基于服务端的服务注册与发现")]),v._v(" "),s("p",[s("img",{attrs:{src:_(415),alt:"Lusifer2018052805390006"}})]),v._v(" "),s("h3",{attrs:{id:"如何解决服务挂了"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何解决服务挂了"}},[v._v("#")]),v._v(" 如何解决服务挂了")]),v._v(" "),s("p",[v._v("​\t　分布式最大的特性就是网络是不可靠，"),s("strong",[v._v("服务调用链")]),v._v("可以采用"),s("strong",[v._v("重试机制")]),v._v("、"),s("strong",[v._v("限流")]),v._v("、"),s("strong",[v._v("熔断机制")]),v._v("、"),s("strong",[v._v("降级")]),v._v("（本地缓存）等，保证"),s("strong",[v._v("任一环节出问题都不至于影响整体链路")]),v._v("。")]),v._v(" "),s("p",[s("img",{attrs:{src:_(416),alt:"image-20211125174122846"}})]),v._v(" "),s("h3",{attrs:{id:"单点故障与分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单点故障与分布式锁"}},[v._v("#")]),v._v(" 单点故障与分布式锁")]),v._v(" "),s("p",[v._v("（1）分布式锁解决Master选举问题")]),v._v(" "),s("p",[v._v("​\t　通常分布式系统采用主从模式，就是一个主控机连接多个处理节点。主节点负责分发任务，从节点负责处理任务，当我们的主节点发生故障时，那么整个系统就都瘫痪了，那么我们把这种故障叫作"),s("strong",[v._v("单点故障")]),v._v("。")]),v._v(" "),s("p",[v._v("​\t　传统解决方案是采用一个备用节点，这个备用节点定期给当前主节点发送 ping 包，主节点收到 ping 包以后向备用节点发送回复Ack，当备用节点收到回复的时候就会认为当前主节点还活着，让他继续提供服务。")]),v._v(" "),s("p",[v._v("​\t　但若出现网络震荡导致丢包，回复没有及时反馈给备用节点，导致备用节点误以为主节点挂了，然后备用节点将他的Master实例启动起来，就导致了分布式系统中有两个主节点（双主问题）。为了防止分布式系统中的多个进程直接相互干扰，需要实现"),s("strong",[v._v("分布式锁")]),v._v("来完成"),s("strong",[v._v("分布式协调调度")]),v._v("。")]),v._v(" "),s("p",[v._v("​\t　Zookeeper为了解决分布式锁的问题，所有服务启动时都需要向Zookeeper 注册  ，注册完以后进行选举，"),s("strong",[v._v("编号最小的节点将在选举中获胜获得锁成为主节点")]),v._v("，"),s("strong",[v._v("其他节点阻塞成为备用节点")]),v._v("。")]),v._v(" "),s("p",[v._v("​\t　当主节点A（编号"),s("code",[v._v("master-001")]),v._v("）出现网络震荡问题时，这时候主节点A所注册的节点将被自动删除，Zookeeper 会自动感知节点的变化，然后再次发出选举，这时候主节点B（编号"),s("code",[v._v("master-002")]),v._v("）将在选举中获胜，替代主节点A成为主节点。")]),v._v(" "),s("p",[v._v("​\t　如果主节点A恢复了，它会再次向 Zookeeper 注册一个新节点（编号"),s("code",[v._v("master-003")]),v._v("），Zookeeper 会感知节点的变化再次发动选举，这时候主节点B在选举中会再次获胜继续担任主节点，主节点A会担任备用节点。")]),v._v(" "),s("p",[v._v("（2）分布式锁解决一致性问题")]),v._v(" "),s("p",[v._v("​\t　由于分布式系统多线程、多进程并且分布在不同机器上，不仅使得成员变量之间不存在共享、也不具有可见性；也导致了原单机部署情况下的并发控制锁策略失效。")]),v._v(" "),s("p",[v._v("​\t　Zookeeper为分布式应用"),s("strong",[v._v("提供一致性服务")]),v._v("，实现了一个方法或属性在高并发的时候，"),s("strong",[v._v("同一时间只能被一个实例的一个线程执行")]),v._v("。具有高可用、高性能、非阻塞、可重入特性以及具备琐失效机制，防止死锁。")]),v._v(" "),s("p",[v._v("​\t　首先创建一个目录 "),s("code",[v._v("MyZookeeper")]),v._v("，线程A想获取锁就在 "),s("code",[v._v("MyZookeeper")]),v._v(" 目录下创建临时顺序节点，接下来，获取"),s("code",[v._v("MyZookecper")]),v._v("目录下所有的子节点，然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小。")]),v._v(" "),s("p",[v._v("​\t　线程B获取所有节点，判断自己不是最小节点，设置监听比自己次小的节点；线程A处理完，删除自己的节点，线程B监听到变更事件，判断自己是不是最小的节点，如果是则获得锁。")]),v._v(" "),s("h2",{attrs:{id:"微服务架构设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构设计模式"}},[v._v("#")]),v._v(" 微服务架构设计模式")]),v._v(" "),s("h3",{attrs:{id:"聚合器设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#聚合器设计模式"}},[v._v("#")]),v._v(" 聚合器设计模式")]),v._v(" "),s("p",[v._v("​\t　聚合器调用多个服务实现应用程序所需的功能。它可以是一个简单的 WEB 页面，将检索到的数据进行处理展示。它也可以是一个更高层次的组合微服务，对检索到的数据增加业务逻辑后进一步发布成一个新的微服务，这符合 "),s("strong",[v._v("DRY")]),v._v(" 原则。")]),v._v(" "),s("p",[v._v("​\t　另外，每个服务都有自己的缓存和数据库。如果聚合器是一个组合服务，那么它也有自己的缓存和数据库。聚合器可以沿 "),s("code",[v._v("X轴")]),v._v(" 和 "),s("code",[v._v("Z轴")]),v._v(" 独立扩展。")]),v._v(" "),s("p",[s("img",{attrs:{src:_(417),alt:"78927387"}})]),v._v(" "),s("h3",{attrs:{id:"链式微服务设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链式微服务设计模式"}},[v._v("#")]),v._v(" 链式微服务设计模式")]),v._v(" "),s("p",[v._v("​\t　这种模式在接收到请求后会产生一个经过合并的响应，如"),s("code",[v._v("服务A")]),v._v(" 接收到请求后会与 "),s("code",[v._v("服务B")]),v._v(" 进行通信，类似地，"),s("code",[v._v("服务B")]),v._v(" 会同 "),s("code",[v._v("服务C")]),v._v(" 进行通信。")]),v._v(" "),s("p",[v._v("​\t　所有服务都使用"),s("strong",[v._v("同步")]),v._v("消息传递，在整个链式调用完成之前，客户端会一直阻塞。因此，"),s("strong",[v._v("服务调用链不宜过长")]),v._v("，以免客户端长时间等待。")]),v._v(" "),s("p",[s("img",{attrs:{src:_(418),alt:"images-12"}})]),v._v(" "),s("h3",{attrs:{id:"分支微服务设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支微服务设计模式"}},[v._v("#")]),v._v(" 分支微服务设计模式")]),v._v(" "),s("p",[v._v("​\t　这种模式是聚合器模式的扩展，允许"),s("strong",[v._v("同时调用多个微服务链")]),v._v("，如下图所示。")]),v._v(" "),s("p",[s("img",{attrs:{src:_(419),alt:"image-13"}})]),v._v(" "),s("h3",{attrs:{id:"数据共享设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据共享设计模式"}},[v._v("#")]),v._v(" 数据共享设计模式")]),v._v(" "),s("p",[v._v("​\t　自治是微服务的设计原则之一，就是说微服务是"),s("strong",[v._v("全栈式服务")]),v._v("。但在重构现有的"),s("code",[v._v("单体应用")]),v._v("时，SQL 数据库反规范化可能会导致数据重复和不一致。因此，在单体应用到微服务架构的过渡阶段，可以使用这种设计模式。")]),v._v(" "),s("p",[v._v("​\t　在这种情况下，部分微服务可能会"),s("strong",[v._v("共享缓存和数据库存储")]),v._v("。不过，这只有在两个服务之间存在强耦合关系时才可以。对于基于微服务的新建应用程序而言，这是一种反模式。")]),v._v(" "),s("p",[s("img",{attrs:{src:_(420),alt:"images-14"}})]),v._v(" "),s("h3",{attrs:{id:"异步消息传递设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步消息传递设计模式"}},[v._v("#")]),v._v(" 异步消息传递设计模式")]),v._v(" "),s("p",[v._v("​\t　虽然 REST 设计模式非常流行，但它是同步的，会造成阻塞。因此部分基于微服务的架构可能会选择使用"),s("strong",[v._v("消息队列")]),v._v("代替 REST 请求/响应，如下图所示。")]),v._v(" "),s("p",[s("img",{attrs:{src:_(421),alt:"images-15"}})]),v._v(" "),s("h2",{attrs:{id:"附录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#附录"}},[v._v("#")]),v._v(" 附录")]),v._v(" "),s("p",[v._v("（1）开发和交付中的伸缩立方")]),v._v(" "),s("p",[v._v("​\t　"),s("strong",[v._v("X轴：")]),v._v(" 运行多个负载均衡器之后的运行实例 "),s("strong",[v._v("Y轴：")]),v._v(" 将应用进一步分解为微服务（分库） "),s("strong",[v._v("Z轴：")]),v._v(" 大数据量时，将服务分区（分表）。")]),v._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 分表，用于存放大量数据")]),v._v("\ntc_order_00\ntc_order_01\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("..")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("..")]),v._v("\ntc_order_09\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# 可根据单号的尾号查询不同的数据库")]),v._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[v._v("# select * from tc_order_${no} where id = '#{id}'")]),v._v("\n")])]),v._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[v._v("1")]),s("br"),s("span",{staticClass:"line-number"},[v._v("2")]),s("br"),s("span",{staticClass:"line-number"},[v._v("3")]),s("br"),s("span",{staticClass:"line-number"},[v._v("4")]),s("br"),s("span",{staticClass:"line-number"},[v._v("5")]),s("br"),s("span",{staticClass:"line-number"},[v._v("6")]),s("br"),s("span",{staticClass:"line-number"},[v._v("7")]),s("br")])]),s("p",[v._v("（2）CAP理论")]),v._v(" "),s("p",[v._v("​\t　CAP 理论指一个分布式系统最多只能同时满足"),s("strong",[v._v("一致性")]),v._v("（Consistency）、"),s("strong",[v._v("可用性")]),v._v("（Availability）和"),s("strong",[v._v("分区容错性")]),v._v("（Partition tolerance）这"),s("strong",[v._v("三项中的两项")]),v._v("。互联网应用常见的是"),s("strong",[v._v("必须保证C")]),v._v("，P和A可根据业务选择。")]),v._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[v._v("① 一致性(C)：更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致\n② 可用性(A)：服务一直可用，而且是正常响应时间\n③ 分区容错性(P)：在遇到某节点或网络分区故障时，仍能对外提供满足一致性和可用性的服务\n")])]),v._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[v._v("1")]),s("br"),s("span",{staticClass:"line-number"},[v._v("2")]),s("br"),s("span",{staticClass:"line-number"},[v._v("3")]),s("br")])]),s("p",[v._v("（3）SOA 架构与微服务架构")]),v._v(" "),s("p",[v._v("​\t　微服务与 SOA 都是为了"),s("strong",[v._v("减少传统的企业服务总线开发的高复杂性")]),v._v("，不同的是，SOA面向服务架构 采用"),s("strong",[v._v("中央管理模式来确保各应用能够交互运作")]),v._v("；微服务着"),s("strong",[v._v("重于分散管理、代码再利用与自动化执行")]),v._v("，可用于解决"),s("strong",[v._v("高并发")]),v._v("、"),s("strong",[v._v("高可用")]),v._v("的问题。")]),v._v(" "),s("p",[v._v("​\t　SOA 架构注重"),s("strong",[v._v("重用")]),v._v("，微服务注重"),s("strong",[v._v("重写")]),v._v("；微服务迁移的时候通常"),s("strong",[v._v("从耦合度最低的模块或对扩展性要求最高的模块开始")]),v._v("，把它们一个一个剥离出来用敏捷地重写，可以尝试最新的技术和语言和框架，然后 "),s("strong",[v._v("单独布署")]),v._v("，不依赖其他服务。")]),v._v(" "),s("p",[v._v("​\t　SOA 架构注重"),s("strong",[v._v("水平")]),v._v("服务，微服务注重"),s("strong",[v._v("垂直")]),v._v("服务。每个微服务通常直接"),s("strong",[v._v("为用户提供某个功能")]),v._v("，而 SOA 通常会返回一个"),s("strong",[v._v("大而全")]),v._v("的结果兼顾到所有的客户端的需求。")]),v._v(" "),s("p",[v._v("​\t　SOA 架构注重"),s("strong",[v._v("自上而下")]),v._v("，微服务注重"),s("strong",[v._v("自下而上")]),v._v("。SOA 架构通常会预先把每个模块服务接口都定义好，而微服务是"),s("strong",[v._v("快速开发迭代")]),v._v("。")]),v._v(" "),s("p",[v._v("（4）Queue 和 Topic 的区别")]),v._v(" "),s("p",[v._v("​\t　Queue是一对一的消息发布接收策略，一个 Sender 发送的消息，只能有一个 Receiver 接收，Receiver 接收完后，通知 MQ 服务器已接收，MQ 服务器对 Queue 里的消息采取删除或其他操作。比如发布了 10 个消息，两个接收者 A,B 那就是 A,B "),s("strong",[v._v("总共")]),v._v(" 会收到 10 条消息，不重复。")]),v._v(" "),s("p",[v._v("​\t　Queue 数据默认会在 MQ 服务器上以文件形式保存，保证每条数据都能被 Receiver 接收。Sender 发送消息到目标 Queue，Receiver 可以异步接收这个 Queue 上的消息。Queue 上的消息如果暂时没有 Receiver 来取，也不会丢失。")]),v._v(" "),s("p",[v._v("​\t　Topic是"),s("strong",[v._v("一对多")]),v._v("的消息发布接收策略，一个发布者发布订阅消息，若有两个接收者 A,B 来订阅，那么发布了 10 条消息，A,B "),s("strong",[v._v("各收到")]),v._v(" 10 条消息。")]),v._v(" "),s("p",[v._v("​\t　Topic 数据默认不落地，是无状态的，并不保证 Publisher 发布的每条数据，Subscriber 都能接受到。一般来说 Publisher 发布消息到某一个 Topic 时，只有正在监听该 Topic 地址的 Sub 能够接收到消息；如果没有 Sub 在监听，该 Topic 就丢失了；Sub 接收完通知 MQ 服务器")])])}),[],!1,null,null,null);t.default=e.exports}}]);